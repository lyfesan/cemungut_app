// lib/presentation/screens/profile/add_edit_address_screen.dart
import 'dart:async';
import 'package:cemungut_app/app/models/address.dart';
import 'package:cemungut_app/app/services/geocoding_service.dart';
import 'package:cemungut_app/app/services/geolocation_service.dart';
import 'package:cemungut_app/app/services/firestore_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';

class AddEditAddressScreen extends StatefulWidget {
  final Address? address;

  const AddEditAddressScreen({super.key, this.address});

  @override
  State<AddEditAddressScreen> createState() => _AddEditAddressScreenState();
}

class _AddEditAddressScreenState extends State<AddEditAddressScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _noteController = TextEditingController();
  final _mapController = MapController();

  LatLng? _currentMapCenter;
  String _addressDetail = "Geser peta untuk menentukan lokasi...";
  bool _isLoading = true;
  bool _isSaving = false;
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    if (widget.address != null) {
      // Edit mode
      _nameController.text = widget.address!.name;
      _noteController.text = widget.address!.note ?? '';
      _addressDetail = widget.address!.addressDetail;
      _currentMapCenter = LatLng(widget.address!.location.latitude, widget.address!.location.longitude);
      setState(() => _isLoading = false);
    } else {
      // Add mode - get current user location
      _determinePosition();
    }
  }

  Future<void> _determinePosition() async {
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Izin lokasi ditolak. Peta akan menampilkan lokasi default.')),
          );
        }
        // Lanjutkan dengan lokasi default dari service
      }
    }

    if (permission == LocationPermission.deniedForever) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Izin lokasi ditolak permanen. Silakan aktifkan di pengaturan aplikasi.')),
        );
      }
      // Lanjutkan dengan lokasi default dari service
    }

    // Jika izin diberikan, dapatkan posisi saat ini
    final Position position = await GeolocationService.getCurrentPosition();
    if (mounted) {
      setState(() {
        _currentMapCenter = LatLng(position.latitude, position.longitude);
        _isLoading = false;
      });
      // Pindahkan ke map controller dan update alamat
      _mapController.move(_currentMapCenter!, 17.0);
      _onMapPositionChanged(_currentMapCenter!);
    }
  }

  Future<void> _centerOnUserLocation() async {
    setState(() {
      _addressDetail = "Mencari lokasi Anda...";
    });

    final Position position = await GeolocationService.getCurrentPosition();
    final newCenter = LatLng(position.latitude, position.longitude);

    if (mounted) {
      // Animasikan peta ke lokasi baru
      _mapController.move(newCenter, 17.0);
      // Trigger geocoding untuk update alamat
      _onMapPositionChanged(newCenter);
    }
  }

  void _onMapPositionChanged(LatLng position) {
    if (_debounce?.isActive ?? false) _debounce!.cancel();
    _debounce = Timer(const Duration(milliseconds: 500), () async {
      setState(() {
        _addressDetail = "Mencari alamat...";
        _currentMapCenter = position;
      });
      final addressString = await GeocodingService.getAddressFromCoordinates(
        position.latitude,
        position.longitude,
      );
      if (mounted) {
        setState(() {
          _addressDetail = addressString;
        });
      }
    });
  }

  Future<void> _saveAddress() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() => _isSaving = true);
    final userId = FirebaseAuth.instance.currentUser?.uid;
    if (userId == null) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text("Gagal mendapatkan ID pengguna")));
      setState(() => _isSaving = false);
      return;
    }

    try {
      final geoPoint = GeoPoint(_currentMapCenter!.latitude, _currentMapCenter!.longitude);

      if (widget.address == null) {
        // Add new address
        final newAddress = Address(
          id: '', // ID will be generated by Firestore service
          name: _nameController.text,
          addressDetail: _addressDetail,
          note: _noteController.text,
          location: geoPoint,
        );
        await FirestoreService.addAddress(userId, newAddress);
      } else {
        // Update existing address
        final updatedAddress = Address(
          id: widget.address!.id,
          name: _nameController.text,
          addressDetail: _addressDetail,
          note: _noteController.text,
          location: geoPoint,
        );
        await FirestoreService.updateAddress(userId, updatedAddress);
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text("Alamat berhasil disimpan!")));
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Gagal menyimpan alamat: $e")));
      }
    } finally {
      if (mounted) {
        setState(() => _isSaving = false);
      }
    }
  }


  @override
  void dispose() {
    _nameController.dispose();
    _noteController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.address == null ? 'Tambah Alamat Baru' : 'Edit Alamat'),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Stack(
        children: [
          FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              initialCenter: _currentMapCenter!,
              initialZoom: 17.0,
              onPositionChanged: (position, hasGesture) {
                if (hasGesture) {
                  _onMapPositionChanged(position.center!);
                }
              },
            ),
            children: [
              TileLayer(
                urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                userAgentPackageName: 'com.example.cemungut_app',
              ),
            ],
          ),
          const Center(
            child: Icon(
              Icons.location_pin,
              color: Colors.red,
              size: 50,
            ),
          ),

          Positioned(
            top: 16,
            right: 16,
            child: FloatingActionButton(
              onPressed: _centerOnUserLocation,
              backgroundColor: Colors.white,
              child: const Icon(Icons.my_location, color: Colors.blue),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Card(
              margin: EdgeInsets.zero,
              shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Text("Detail Alamat", style: Theme.of(context).textTheme.titleLarge),
                      const SizedBox(height: 8),
                      Text(_addressDetail, style: Theme.of(context).textTheme.bodyMedium),
                      const Divider(height: 24),
                      TextFormField(
                        controller: _nameController,
                        decoration: const InputDecoration(
                          labelText: 'Nama Alamat (cth: Rumah, Kantor)',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.label),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Nama alamat tidak boleh kosong';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                      TextFormField(
                        controller: _noteController,
                        decoration: const InputDecoration(
                          labelText: 'Catatan (Opsional)',
                          hintText: 'Cth: Pagar warna hijau',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.note),
                        ),
                      ),
                      const SizedBox(height: 24),
                      ElevatedButton(
                        onPressed: _isSaving ? null : _saveAddress,
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                        child: _isSaving
                            ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white,))
                            : const Text('Simpan Alamat'),
                      )
                    ],
                  ),
                ),
              ),
            ),
          )
        ],
      ),
    );
  }
}